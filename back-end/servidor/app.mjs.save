import express from 'express';
import http from 'http';
import WebSocket from 'ws';
import queryInformix from './queryDatabase/queryInformix.mjs';
import cors from 'cors';

const port =8080;
const app = express();

let informixData = [];

// Cabeçalho cors

app.use ((req, res, next) => {

res.header("Access-Control-Allow-Origin", "*");

res.header("Access-Control-Allow-Methods", "GET", "PUT");

app.use(cors());

next();
});


// Crie um servidor HTTP a partir da aplicação Express
const server = http.createServer(app);

// Crie o servidor WebSocket associado ao servidor HTTP
const wss = new WebSocket.Server({ noServer: true });

// Adicione uma função para realizar a consulta ao Informix a cada 1 segundo
async function updateInformixData() {
  try {
    const result = await queryInformix();
    informixData = result;

    // Enviar atualizações para todos os clientes conectados
    wss.clients.forEach((client) => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(JSON.stringify(informixData));
      }
    });
  } catch (error) {
    console.error('Erro na consulta ao Informix:', error);
  }
}

// Inicie a função de consulta ao Informix e atualização dos dados
setInterval(updateInformixData, 5000);

// Rota para lidar com a conexão WebSocket
wss.on('connection', (ws) => {
  // Quando um cliente se conecta, envie os dados atuais imediatamente
  ws.send(JSON.stringify(informixData));
});

// Integre o servidor WebSocket com o servidor HTTP
server.on('upgrade', (request, socket, head) => {
  wss.handleUpgrade(request, socket, head, (ws) => {
    wss.emit('connection', ws, request);
  });
});

app.get('/informixdb', function (req, res) {
  // Retorna os dados armazenados em informixData
  res.json(informixData);
});

server.listen(port, () => {
  console.log(`Servidor rodando na porta ${port}`);
});
